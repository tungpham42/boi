import solarlunar from "solarlunar";
import { lucThapHoaGiapData } from "../data/lucThapHoaGiapData";
import {
  lucDieu,
  nhiThapBatTu,
  phongThuyAdvice,
  getLucDieu,
  getNhiThapBatTu,
} from "../data/ngocHapData";

// Danh s√°ch c√°c ho·∫°t ƒë·ªông
const activities = [
  { value: "", label: "T·∫•t c·∫£" },
  { value: "xay-dung", label: "X√¢y d·ª±ng" },
  { value: "ket-hon", label: "K·∫øt h√¥n" },
  { value: "xuat-hanh", label: "Xu·∫•t h√†nh" },
  { value: "an-tang", label: "An t√°ng" },
];

const getLabelByValue = (value) =>
  activities.find((item) => item.value === value)?.label || "T·∫•t c·∫£";

export const calculateFortune = (solarDate, activity) => {
  const { day, month, year, hour, gender } = solarDate;
  const currentDate = new Date(); // Ng√†y hi·ªán t·∫°i: 10/04/2025
  const currentYear = currentDate.getFullYear();

  // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
  if (!day || !month || !year || !gender) {
    return {
      result: "H√£y khai b√°o ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÉ ti√™n tri v·∫≠n m·ªánh c·ªßa b·∫°n!",
    };
  }

  // Chuy·ªÉn ƒë·ªïi sang √¢m l·ªãch
  const lunar = solarlunar.solar2lunar(
    parseInt(year),
    parseInt(month),
    parseInt(day)
  );

  if (!lucThapHoaGiapData[lunar.lYear]) {
    return { result: "Thi√™n c∆° ch∆∞a th·ªÉ h√© l·ªô v·∫≠n m·ªánh c·ªßa nƒÉm n√†y!" };
  }

  // L·∫•y th√¥ng tin c∆° b·∫£n t·ª´ d·ªØ li·ªáu
  const { canChi, menh, moTa, napAm } = lucThapHoaGiapData[lunar.lYear];
  const hourBranch = hour ? getHourBranch(hour) : "Ch∆∞a ƒë·ªãnh gi·ªù";
  const cungMenh = calculateCungMenh(year, gender, hour, hourBranch); // Truy·ªÅn hourBranch v√†o
  const lucDieuResult = getLucDieu(lunar.lDay);
  const nhiThapBatTuResult = getNhiThapBatTu(lunar.lDay);
  const dayRecommendations = recommendGoodBadDays(lunar.lDay, activity);
  const goodDaysCurrentYear = predictGoodDaysInCurrentYear(
    activity,
    currentDate
  );
  const yearFortune = predictYearFortune(menh, currentYear);
  const saoChieuMenh = getSaoChieuMenh(lunar.lYear, gender);

  // T·∫°o k·∫øt qu·∫£ chi ti·∫øt v·ªõi phong c√°ch b√≥i to√°n
  const fortune = `
    üåü **V·∫≠n M·ªánh Ti√™n Tri - Ng·ªçc H·∫°p Th√¥ng Th∆∞** üåü
    Ng√†y sinh D∆∞∆°ng l·ªãch: ${day}/${month}/${year}
    Ng√†y sinh √Çm l·ªãch: ${lunar.lDay}/${lunar.lMonth}/${lunar.lYear} (${canChi})
    Gi·ªù sinh: ${hour ? `${hour}h - ${hourBranch}` : "Ch∆∞a ƒë·ªãnh gi·ªù"}
    Gi·ªõi t√≠nh: ${gender === "male" ? "Nam" : "N·ªØ"}
    Cung m·ªánh: ${cungMenh}
    M·ªánh ng≈© h√†nh: ${menh} (${napAm})
    T√≠nh c√°ch ƒë·ªãnh m·ªánh: ${moTa}
    Sao chi·∫øu m·ªánh: ${saoChieuMenh.name} - ${saoChieuMenh.meaning}
    L·ª•c Di·ªáu: ${lucDieuResult} (${lucDieu[lucDieuResult]})
    Nh·ªã Th·∫≠p B√°t T√∫: ${nhiThapBatTuResult} (${nhiThapBatTu[nhiThapBatTuResult]})
    ƒê√°nh gi√° ng√†y sinh: ${dayRecommendations}
    V·∫≠n h·∫°n nƒÉm ${currentYear}: ${yearFortune}
    B√≠ ph√°p phong th·ªßy: ${
      phongThuyAdvice[menh] || "Gi·ªØ t√¢m an, tr√°nh xa th·ªã phi."
    }
    \nüåü **Ng√†y t·ªët trong nƒÉm ${currentYear}** ${
    activity ? `cho "${getLabelByValue(activity)}"` : "(t·ªïng qu√°t)"
  }:
    ${goodDaysCurrentYear
      .map((day) => `‚ú® ${day.date}: ${day.recommendation}`)
      .join("\n")}
  `;

  return { result: fortune, lunarDate: lunar };
};

// H√†m l·∫•y chi (12 ƒë·ªãa chi) theo gi·ªù sinh
const getHourBranch = (hour) => {
  const hourNum = parseInt(hour);
  const branches = [
    "T√Ω",
    "S·ª≠u",
    "D·∫ßn",
    "M√£o",
    "Th√¨n",
    "T·ªµ",
    "Ng·ªç",
    "M√πi",
    "Th√¢n",
    "D·∫≠u",
    "Tu·∫•t",
    "H·ª£i",
  ];
  return branches[Math.floor(((hourNum + 1) % 24) / 2)] || "T√Ω";
};

// T√≠nh cung m·ªánh theo nƒÉm, gi·ªõi t√≠nh v√† gi·ªù (ƒë√£ s·ª≠a ƒë·ªÉ nh·∫≠n hourBranch)
const calculateCungMenh = (year, gender, hour, hourBranch) => {
  const yearNum = parseInt(year);
  const sum = yearNum
    .toString()
    .split("")
    .reduce((acc, digit) => acc + parseInt(digit), 0);
  let cungNum =
    sum > 9
      ? sum
          .toString()
          .split("")
          .reduce((acc, digit) => acc + parseInt(digit), 0)
      : sum;

  cungNum = gender === "male" ? 10 - cungNum || 9 : (cungNum + 5) % 9 || 9;

  const cungMap = {
    male: ["", "Kh·∫£m", "Ly", "Ch·∫•n", "T·ªën", "C√†n", "ƒêo√†i", "C·∫•n", "Kh√¥n", "Ly"],
    female: [
      "",
      "Kh√¥n",
      "C·∫•n",
      "ƒêo√†i",
      "C√†n",
      "T·ªën",
      "Ch·∫•n",
      "Ly",
      "Kh·∫£m",
      "C√†n",
    ],
  };
  const baseCung = cungMap[gender][cungNum];
  const hourAdjust = {
    T√Ω: "Kh·∫£m",
    S·ª≠u: "C·∫•n",
    D·∫ßn: "Ch·∫•n",
    M√£o: "Ch·∫•n",
    Th√¨n: "T·ªën",
    T·ªµ: "T·ªën",
    Ng·ªç: "Ly",
    M√πi: "Kh√¥n",
    Th√¢n: "ƒêo√†i",
    D·∫≠u: "ƒêo√†i",
    Tu·∫•t: "C√†n",
    H·ª£i: "C√†n",
  };
  return hour
    ? `${baseCung} (gi·ªù ${hourBranch}: ${hourAdjust[hourBranch]})`
    : baseCung;
};

// ƒê√°nh gi√° ng√†y t·ªët/x·∫•u theo L·ª•c Di·ªáu v√† Nh·ªã Th·∫≠p B√°t T√∫
const recommendGoodBadDays = (lunarDay, selectedActivity) => {
  const lucDieuResult = getLucDieu(lunarDay);
  const nhiThapBatTuResult = getNhiThapBatTu(lunarDay);
  const goodLucDieu = ["ƒê·∫°i An", "T·ªëc H·ª∑", "Ti·ªÉu C√°t"];
  const activityStars = {
    "xay-dung": ["ƒê·∫©u", "L√¢u", "V·ªã", "S√¢m", "Tr∆∞∆°ng", "Cang", "Vƒ©"],
    "ket-hon": ["Ng∆∞u", "T·∫•t", "Tinh", "ƒê√™", "C∆°"],
    "xuat-hanh": ["Th·∫•t", "Ph√≤ng", "Ch·∫©n"],
    "an-tang": ["H∆∞", "Li·ªÖu"],
  };

  let advice = goodLucDieu.includes(lucDieuResult)
    ? "Ng√†y n√†y ƒë·∫°i c√°t: "
    : "Ng√†y n√†y hung hi·ªÉm: ";
  const activitiesToCheck = selectedActivity
    ? [selectedActivity]
    : Object.keys(activityStars);

  activitiesToCheck.forEach((act) => {
    const isGood = activityStars[act]?.includes(nhiThapBatTuResult);
    advice += `${getLabelByValue(act)}: ${
      isGood && goodLucDieu.includes(lucDieuResult) ? "T·ªët" : "X·∫•u"
    }, `;
  });

  return advice.replace(/, $/, ".") || "Ng√†y n√†y trung b√¨nh, c·∫ßn th·∫≠n tr·ªçng.";
};

// D·ª± ƒëo√°n ng√†y t·ªët trong nƒÉm
const predictGoodDaysInCurrentYear = (selectedActivity, currentDate) => {
  const goodDays = [];
  const startDate = new Date(currentDate);

  for (let i = 0; i < 60; i++) {
    // TƒÉng l√™n 60 ng√†y ƒë·ªÉ c√≥ nhi·ªÅu l·ª±a ch·ªçn h∆°n
    const nextDate = new Date(startDate);
    nextDate.setDate(startDate.getDate() + i);
    const lunar = solarlunar.solar2lunar(
      nextDate.getFullYear(),
      nextDate.getMonth() + 1,
      nextDate.getDate()
    );
    const lucDieuResult = getLucDieu(lunar.lDay);
    const nhiThapBatTuResult = getNhiThapBatTu(lunar.lDay);

    if (
      ["ƒê·∫°i An", "T·ªëc H·ª∑", "Ti·ªÉu C√°t"].includes(lucDieuResult) &&
      (!selectedActivity ||
        activityStars[selectedActivity]?.includes(nhiThapBatTuResult))
    ) {
      goodDays.push({
        date: `${lunar.lDay}/${lunar.lMonth}/${
          lunar.lYear
        } (√Çm) - ${nextDate.toLocaleDateString("vi-VN")}`,
        recommendation: recommendGoodBadDays(lunar.lDay, selectedActivity),
      });
    }
  }
  return goodDays.slice(0, 5); // L·∫•y 5 ng√†y t·ªët nh·∫•t
};

// D·ª± ƒëo√°n v·∫≠n m·ªánh nƒÉm hi·ªán t·∫°i
const predictYearFortune = (userMenh, currentYear) => {
  const currentYearMenh = lucThapHoaGiapData[currentYear].menh;
  const tuongSinh = {
    M·ªôc: "H·ªèa",
    H·ªèa: "Th·ªï",
    Th·ªï: "Kim",
    Kim: "Th·ªßy",
    Th·ªßy: "M·ªôc",
  };
  const tuongKhac = {
    M·ªôc: "Th·ªï",
    H·ªèa: "Th·ªßy",
    Th·ªï: "M·ªôc",
    Kim: "H·ªèa",
    Th·ªßy: "Kim",
  };

  if (userMenh === currentYearMenh)
    return "Thi√™n th·ªùi h√≤a h·ª£p, v·∫°n s·ª± hanh th√¥ng.";
  if (tuongSinh[userMenh] === currentYearMenh)
    return "Ng≈© h√†nh t∆∞∆°ng sinh, t√†i l·ªôc d·ªìi d√†o.";
  if (tuongSinh[currentYearMenh] === userMenh)
    return "ƒê∆∞·ª£c tr·ªùi n√¢ng ƒë·ª°, b√¨nh an v√¥ s·ª±.";
  if (tuongKhac[userMenh] === currentYearMenh)
    return "T∆∞∆°ng kh·∫Øc ƒë√® n√©n, c·∫©n th·∫≠n tai ∆∞∆°ng.";
  return "V·∫≠n m·ªánh trung b√¨nh, c·∫ßn gi·ªØ t√¢m v·ªØng v√†ng.";
};

// Th√™m sao chi·∫øu m·ªánh
const getSaoChieuMenh = (lunarYear, gender) => {
  const saoNam = [
    "La H·∫ßu",
    "Th·ªï T√∫",
    "Th·ªßy Di·ªáu",
    "Th√°i B·∫°ch",
    "Th√°i D∆∞∆°ng",
    "V√¢n H·ªõn",
    "K·∫ø ƒê√¥",
    "Th√°i √Çm",
    "M·ªôc ƒê·ª©c",
  ];
  const saoNu = [
    "K·∫ø ƒê√¥",
    "V√¢n H·ªõn",
    "Th·ªï T√∫",
    "Th√°i √Çm",
    "Th·ªßy Di·ªáu",
    "La H·∫ßu",
    "Th√°i B·∫°ch",
    "M·ªôc ƒê·ª©c",
    "Th√°i D∆∞∆°ng",
  ];
  const yearCycle = (lunarYear - 1924) % 9; // Chu k·ª≥ 9 sao b·∫Øt ƒë·∫ßu t·ª´ 1924
  const saoList = gender === "male" ? saoNam : saoNu;

  const saoMeanings = {
    "La H·∫ßu": "Sao hung, d·ªÖ g·∫∑p th·ªã phi, c·∫ßn gi·ªØ mi·ªáng l∆∞·ª°i.",
    "Th·ªï T√∫": "Sao trung, s·ª©c kh·ªèe y·∫øu, tr√°nh xa tranh c√£i.",
    "Th·ªßy Di·ªáu": "Sao c√°t, t√†i l·ªôc ƒë·∫øn t·ª´ l·ªùi n√≥i.",
    "Th√°i B·∫°ch": "Sao hung, hao t√†i t·ªën c·ªßa, c·∫©n th·∫≠n ti·ªÅn b·∫°c.",
    "Th√°i D∆∞∆°ng": "Sao c√°t, v∆∞·ª£ng ph√°t s·ª± nghi·ªáp, ƒë·∫∑c bi·ªát v·ªõi nam.",
    "V√¢n H·ªõn": "Sao trung, ti·ªÉu nh√¢n qu·∫•y ph√°, c·∫ßn ƒë·ªÅ ph√≤ng.",
    "K·∫ø ƒê√¥": "Sao hung, bu·ªìn phi·ªÅn, d·ªÖ g·∫∑p tr·∫Øc tr·ªü.",
    "Th√°i √Çm": "Sao c√°t, h·∫°nh ph√∫c gia ƒë·∫°o, ƒë·∫∑c bi·ªát v·ªõi n·ªØ.",
    "M·ªôc ƒê·ª©c": "Sao c√°t, may m·∫Øn, s·ª©c kh·ªèe d·ªìi d√†o.",
  };

  const sao = saoList[yearCycle];
  return { name: sao, meaning: saoMeanings[sao] };
};

// Danh s√°ch sao t·ªët cho t·ª´ng ho·∫°t ƒë·ªông
const activityStars = {
  "xay-dung": ["ƒê·∫©u", "L√¢u", "V·ªã", "S√¢m", "Tr∆∞∆°ng", "Cang", "Vƒ©"],
  "ket-hon": ["Ng∆∞u", "T·∫•t", "Tinh", "ƒê√™", "C∆°"],
  "xuat-hanh": ["Th·∫•t", "Ph√≤ng", "Ch·∫©n"],
  "an-tang": ["H∆∞", "Li·ªÖu"],
};
